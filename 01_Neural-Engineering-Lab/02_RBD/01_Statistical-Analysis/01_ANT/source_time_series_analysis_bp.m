% Script generated by Brainstorm (13-Aug-2022)
clc;clear;

% 주의사항
% 1. 'brainstorm_220815_src' 폴더 경로에 추가
% 2. brainstorm 킨 후 진행하기

%% Data loading and pre-processing
% con/rbd에 따라 바꿔줄 코드
% 1. path
% 2. range of i

load('D:\ANT_3D_CNN\ANT_set_file\fn.mat');          % 피험자 이름 정리된 파일
fname = {fn.name};
%path = 'C:\Users\Nelab_001\Documents\MATLAB\brainstorm_db\CON_ANT_source_time_series\data';
path = 'C:\Users\Nelab_001\Documents\MATLAB\brainstorm_db\RBD_ANT_source_time_series\data';
List = dir(path);
folder_name = {List.name};      %folder 명 : (RBD)5~66까지 / (CON)5~28까지

%for i = 1:24
for i = 1:62
    % Input files
    sFiles = [];
    SubjectNames = {folder_name{i+4}};    
    RawFiles = {...
            % NC
            %strcat('D:\ANT_3D_CNN\ANT_set_file\',fname{i})};
            % RBD
            strcat('D:\ANT_3D_CNN\ANT_set_file\',fname{i+24})};

    % Start a new report
    bst_report('Start', sFiles);

    % Process: Import MEG/EEG: Events
    sFiles = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
        'subjectname',   SubjectNames{1}, ...
        'condition',     '', ...
        'datafile',      {{RawFiles{1}}, 'EEG-EEGLAB'}, ...
        'eventname',     'NOC, CTC, DSC, USC, CDL, CDR, CUL, CUR, IDL, IDR, IUL, IUR', ...
        'timewindow',    [], ...
        'epochtime',     [-1.0, 2.0], ...
        'split',         0, ...
        'createcond',    1, ...
        'ignoreshort',   0, ...
        'channelalign',  1, ...
        'usectfcomp',    1, ...
        'usessp',        1, ...
        'freq',          400, ...
        'baseline',      [], ...
        'blsensortypes', 'EEG');

    % Save and display report
    ReportFile = bst_report('Save', sFiles);
    %bst_report('Open', ReportFile);
    % bst_report('Export', ReportFile, ExportDir);
    % bst_report('Email', ReportFile, username, to, subject, isFullReport);

end

%% compute source

% Process: Compute head model
% Process: Compute covariance (noise or data)
% Process: Compute sources [2018] Kernel only: shared

%% convert to seed vertex

clear; close all; clc;

load('C:\Users\Nelab_001\Documents\MATLAB\RBD_ANT\2.HJI_source_analysis\scout_Mindboggle_62.mat');

for i=1:size(Scouts,2)
   Scouts(i).Vertices=Scouts(i).Seed;
end

save('scout_Mindboggle_62_seed_vertex.mat','Name','Scouts','TessNbVertices');

%% Mollweide 2D projection
% 주의사항
% 1. 'Mollweide_projection' 폴더 경로에 추가

clc;clear;
%brainstorm
condition_list = ['CTC';'DSC';'NOC';'USC'];     % 변환하고자 하는 condition 입력
%% CON (# of patients : 24)
ABS_PATH = 'C:\Users\Nelab_001\Documents\MATLAB\brainstorm_db\CON_ANT_source_example';
all_trial = [];

for a = 1:24        % 피험자 수
    tic
    fprintf('현재 변환 중인 피험자 번호 : %d \n', a)
    ni = a; % 분석할 subject 번호
    Subjectm = sprintf('Subject%02d',ni);
    for b = 1:size(condition_list, 1)           % condition 수
        condition_name = condition_list(b, :);
        condition_trial = [];
        [sStudy, iStudy] = bst_get('StudyWithCondition', [Subjectm filesep condition_name]);
        sSubject = bst_get('Subject', Subjectm);
        SurfaceFile = [ABS_PATH filesep 'anat' filesep sSubject.Surface(sSubject.iCortex).FileName]; % surface 파일명
        for c = 1:length(sStudy.Data)           % trial 수
            i = c; % 분석할 ResultFile 번호
            FileNames = [];
            FileNames = strsplit(sStudy.Result(i).FileName,'|');
            SourceName = [ABS_PATH filesep 'data' filesep FileNames{1,2}];
            DataName = [ABS_PATH filesep 'data' filesep FileNames{1,3}];
            size_x = 60; size_y = 60; % mollweide projection 2D image size
            cfg = [];
            [lH_image, rH_image] = flatten_source(SourceName, SurfaceFile, size_x, size_y, DataName, cfg);
            gr_il_reshape = permute(lH_image,[3 1 2]);
            gr_ir_reshape = permute(rH_image,[3 1 2]);
            merged = cat(3,gr_il_reshape,gr_ir_reshape); % input data (60 x 120, y[1:60]: lHem, y[61:120]: rHem)
            merged = permute(merged,[2 3 1]);
            merged_avg = [];
            for d = 1:15    % 100 ms 마다 평균 (cue 기준 0~1500 ms)
                time_range = (41+20*(d-1)):(60+20*(d-1));
                merged_100 = mean(merged(:, :, time_range), 3);
                merged_avg(:, :, d) = merged_100;
            end
            condition_trial(c, :, :, :) = merged_avg;
        end
        all_trial{a, b} = condition_trial;
    end
    fprintf('한 명당 걸리는 시간은 : \n')
    toc
end

save('D:\ANT_3D_CNN\ANT_source_DL\control\all_trial.mat', 'all_trial', '-v7.3')

%% RBD (# of patients : 62)
ABS_PATH = 'C:\Users\Nelab_001\Documents\MATLAB\brainstorm_db\RBD_ANT_source_example';
all_trial = [];

for a = 1:62        % 피험자 수
    tic
    fprintf('현재 변환 중인 피험자 번호 : %d \n', a)
    ni = a; % 분석할 subject 번호
    Subjectm = sprintf('Subject%02d',ni);
    for b = 1:size(condition_list, 1)           % condition 수
        condition_name = condition_list(b, :);
        condition_trial = [];
        [sStudy, iStudy] = bst_get('StudyWithCondition', [Subjectm filesep condition_name]);
        sSubject = bst_get('Subject', Subjectm);
        SurfaceFile = [ABS_PATH filesep 'anat' filesep sSubject.Surface(sSubject.iCortex).FileName]; % surface 파일명
        for c = 1:length(sStudy.Data)           % trial 수
            i = c; % 분석할 ResultFile 번호
            FileNames = [];
            FileNames = strsplit(sStudy.Result(i).FileName,'|');
            SourceName = [ABS_PATH filesep 'data' filesep FileNames{1,2}];
            DataName = [ABS_PATH filesep 'data' filesep FileNames{1,3}];
            size_x = 60; size_y = 60; % mollweide projection 2D image size
            cfg = [];
            [lH_image, rH_image] = flatten_source(SourceName, SurfaceFile, size_x, size_y, DataName, cfg);
            gr_il_reshape = permute(lH_image,[3 1 2]);
            gr_ir_reshape = permute(rH_image,[3 1 2]);
            merged = cat(3,gr_il_reshape,gr_ir_reshape); % input data (60 x 120, y[1:60]: lHem, y[61:120]: rHem)
            merged = permute(merged,[2 3 1]);
            merged_avg = [];
            for d = 1:15    % 100 ms 마다 평균 (cue 기준 0~1500 ms)
                time_range = (41+20*(d-1)):(60+20*(d-1));
                merged_100 = mean(merged(:, :, time_range), 3);
                merged_avg(:, :, d) = merged_100;
            end
            condition_trial(c, :, :, :) = merged_avg;
        end
        all_trial{a, b} = condition_trial;
    end
    fprintf('한 명당 걸리는 시간은 : \n')
    toc
end

save('D:\ANT_3D_CNN\ANT_source_DL\rbd\all_trial.mat', 'all_trial', '-v7.3')

%% DL 입력데이터로 변환 (python에서 사용할 데이터, ground_truth data도 생성하여 같이 저장)
% ----------------------------------------------------------------------------------------------------------------------------------------
% -------------------------------------------------------------- CON ---------------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------

clc; close all; clear;
load('D:\ANT_3D_CNN\ANT_source_DL\control\all_trial.mat');

ANT_con_source_3d = [];
ground_truth = [];
for i = 1:size(all_trial, 1)
    for j = 1:size(all_trial, 2)
        ANT_con_source_3d = cat(1, ANT_con_source_3d, all_trial{i, j});
        sub_vector = zeros(size(all_trial{i, j}, 1), 1);
        sub_num = i;
        sub_vector(:) = sub_num;
        ground_truth = cat(1, ground_truth, sub_vector);
    end
end

save('D:\ANT_3D_CNN\ANT_source_DL\control\ANT_con_source_3d.mat', 'ANT_con_source_3d', 'ground_truth', '-v7.3')

% ----------------------------------------------------------------------------------------------------------------------------------------
% -------------------------------------------------------------- RBD ---------------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------
clc; close all; clear;
load('D:\ANT_3D_CNN\ANT_source_DL\rbd\all_trial.mat');

ANT_rbd_source_3d = [];
ground_truth = [];
for i = 1:size(all_trial, 1)
    for j = 1:size(all_trial, 2)
        ANT_rbd_source_3d = cat(1, ANT_rbd_source_3d, all_trial{i, j});
        sub_vector = zeros(size(all_trial{i, j}, 1), 1);
        sub_num = i;
        sub_vector(:) = sub_num;
        ground_truth = cat(1, ground_truth, sub_vector);
    end
end

save('D:\ANT_3D_CNN\ANT_source_DL\rbd\ANT_rbd_source_3d.mat', 'ANT_rbd_source_3d', 'ground_truth', '-v7.3')

%% DL 입력데이터를 -1~1로 normalization (정규화)
% normalization [-1 1] (부경형 3D-CNN code 참고)

% ----------------------------------------------------------------------------------------------------------------------------------------
% -------------------------------------------------------------- CON ---------------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------

clc; close all; clear;

load('D:\ANT_3D_CNN\ANT_source_DL\control\ANT_con_source_3d.mat');
normalization_range = [-1 1];
ANT_con_source_3d_normalization = [];
for i = 1:size(ANT_con_source_3d, 1)
    data = squeeze(ANT_con_source_3d(i, :, :, :));
    data_sort = reshape(data, [], 1);
    data_min = min(data_sort);  % a
    data_max = max(data_sort);  % b
    c = normalization_range(1);
    d = normalization_range(2);
    data_normalization = ((data-data_min)/(data_max-data_min)*(d-c))+c;
    ANT_con_source_3d_normalization(i, :, :, :) = data_normalization;
end

save('D:\ANT_3D_CNN\ANT_source_DL\control\ANT_con_source_3d_normalization.mat', 'ANT_con_source_3d_normalization', 'ground_truth', '-v7.3')

% ----------------------------------------------------------------------------------------------------------------------------------------
% -------------------------------------------------------------- RBD ---------------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------

clc; close all; clear;

load('D:\ANT_3D_CNN\ANT_source_DL\rbd\ANT_rbd_source_3d.mat');
normalization_range = [-1 1];
ANT_rbd_source_3d_normalization = [];
for i = 1:size(ANT_rbd_source_3d, 1)
    data = squeeze(ANT_rbd_source_3d(i, :, :, :));
    data_sort = reshape(data, [], 1);
    data_min = min(data_sort);  % a
    data_max = max(data_sort);  % b
    c = normalization_range(1);
    d = normalization_range(2);
    data_normalization = ((data-data_min)/(data_max-data_min)*(d-c))+c;
    ANT_rbd_source_3d_normalization(i, :, :, :) = data_normalization;
end

save('D:\ANT_3D_CNN\ANT_source_DL\rbd\ANT_rbd_source_3d_normalization.mat', 'ANT_rbd_source_3d_normalization', 'ground_truth', '-v7.3')

%% DL 입력데이터를 trial별로 저장

% ----------------------------------------------------------------------------------------------------------------------------------------
% ------------------------------------------------------------- CON ----------------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------

% CON 'R_G_all'
clc;clear;
%brainstorm
condition_list = ['CTC';'DSC';'NOC';'USC'];     % 변환하고자 하는 condition 입력
ABS_PATH = 'C:\Users\Nelab_001\Documents\MATLAB\brainstorm_db\CON_ANT_source_example';
R_G_all_con = [];
i = 1;
for a = 1:24
    ni = a;
    Subjectm = sprintf('Subject%02d', ni);
    all_trial_num = 1;
    for b = 1:size(condition_list, 1)
        condition_name = condition_list(b, :);
        [sStudy, iStudy] = bst_get('StudyWithCondition', [Subjectm filesep condition_name]);
        trial_num = length(sStudy.Data);                        % condition 안에서의 trial number
        for c = 1:trial_num
            R_G_all_con{i, 1} = sprintf('%d_%d.mat', a, all_trial_num);     % trial 파일 명
            R_G_all_con{i, 2} = 1;                              % con=1, rbd=2
            R_G_all_con{i, 3} = a;                              % 피험자 번호 (con 24명:1~24, rbd 62명:25~86)
            R_G_all_con{i, 4} = condition_name;                 % condition 종류
            i = i + 1;
            all_trial_num = all_trial_num + 1;
        end
    end
end

% ----------------------------------------------------------------------------------------------------------------------------------------
% ------------------------------------------------------------- RBD ----------------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------

% 여기서 Brainstorm 프로토콜 RBD로 변경
% RBD 'R_G_all'
condition_list = ['CTC';'DSC';'NOC';'USC'];     % 변환하고자 하는 condition 입력
ABS_PATH = 'C:\Users\Nelab_001\Documents\MATLAB\brainstorm_db\RBD_ANT_source_example';
R_G_all_rbd = [];
i = 1;
for a = 1:62
    ni = a;
    Subjectm = sprintf('Subject%02d', ni);
    all_trial_num = 1;
    for b = 1:size(condition_list, 1)
        condition_name = condition_list(b, :);
        [sStudy, iStudy] = bst_get('StudyWithCondition', [Subjectm filesep condition_name]);
        trial_num = length(sStudy.Data);
        for c = 1:trial_num
            R_G_all_rbd{i, 1} = sprintf('%d_%d.mat', a + 24, all_trial_num);     % trial 파일 명
            R_G_all_rbd{i, 2} = 2;                                   % con=1, rbd=2
            R_G_all_rbd{i, 3} = a + 24;                              % 피험자 번호 (con 24명:1~24, rbd 62명:25~86)
            R_G_all_rbd{i, 4} = condition_name;                      % condition 종류
            i = i + 1;
            all_trial_num = all_trial_num + 1;
        end
    end
end

R_G_all = [R_G_all_con; R_G_all_rbd];

save('D:\ANT_3D_CNN\ANT_source_DL\generator_data\mark.mat', 'R_G_all')

% ----------------------------------------------------------------------------------------------------------------------------------------
% ---------------------------------------------------- 전체 trial 저장 --------------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------

% data 저장 (파일명 형식 : '피험자번호_trial번호.mat')
clc; close all; clear;
load('D:\ANT_3D_CNN\ANT_source_DL\generator_data\mark.mat')
load('D:\ANT_3D_CNN\ANT_source_DL\control\ANT_con_source_3d_normalization.mat')
load('D:\ANT_3D_CNN\ANT_source_DL\rbd\ANT_rbd_source_3d_normalization.mat')

data = cat(1, ANT_con_source_3d_normalization, ANT_rbd_source_3d_normalization);
clearvars ground_truth ANT_con_source_3d_normalization ANT_rbd_source_3d_normalization

for i = 1:size(data, 1)
    X_all = squeeze(data(i, :, :, :));
    file_name = strcat('D:\ANT_3D_CNN\ANT_source_DL\generator_data\', R_G_all{i, 1});
    save(file_name, 'X_all');
end

%% LRP
% ----------------------------------------------------------------------------------------------------------------------------------------
% -------------------------------------------------------------- 62명 평균 LRP------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------
clc;clear;

LRP_all = zeros(60, 120, 15);
for i = 1:62
    LRP_name = sprintf('D:/ANT_3D_CNN_source_transfer2/LRP/LRP_PT/LRP_TP_sub_%d.npy', i);     %일련의 파일 가져오기 (파일명+숫자.mat일 때)
    LRP_result_individual = readNPY(LRP_name);
    LRP_mean_individual = squeeze(mean(LRP_result_individual, 1));
    LRP_all = LRP_all + LRP_mean_individual;
end

LRP_all_mean = LRP_all / 62;
%a = LRP_all_mean(:, :, 1);
all_value_vector = reshape(LRP_all_mean, 1, []);
all_value_vector_sort = sort(all_value_vector, 'descend');
%thd = all_value_vector_sort(10800);  % 상위 10%
%thd = all_value_vector_sort(5400);  % 상위 5%
thd = all_value_vector_sort(1080);  % 상위 1%

epoch = 100;
result_path = 'D:\ANT_3D_CNN_source_transfer2\LRP\LRP_PT\LRP_heatmap';
cfg = [];
%cfg.cmax = max(LRP_all_mean(:));
cfg.cmin = thd;
cfg.cmax = 0.0005;
cfg.summary = false;
cfg.plot = '3D'; % '2D', '3D', false
% set figure
[~, rFig] = func_plot_surface_LRP3D(cfg, LRP_all_mean(:,:,1));
cfg.hFig = rFig;
% figure;
val_max = [];
sourcevalues = [];
for ti = 8:8
%     subplot(4,4,ti);
    disp(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
    cfg.save_path = [result_path filesep 'images' filesep num2str(ti) '_avg_test_' num2str(epoch*(ti-1)) '_' num2str(epoch*ti) '.png'];
    [sourcevalue, ~, stat] = func_plot_surface_LRP3D(cfg, LRP_all_mean(:,:,ti));
    val_max = cat(1, val_max, stat.max);
    sourcevalues = cat(2, sourcevalues, sourcevalue);
%     title(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
end
save([result_path filesep 'images' filesep 'sourcevalues.mat'], 'sourcevalues');

% ----------------------------------------------------------------------------------------------------------------------------------------
% -------------------------------------------------------------- 개인별 평균 LRP------------------------------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------
clc;clear;

patient_num = 19;

LRP_name = sprintf('D:/ANT_3D_CNN_source_transfer2/LRP/LRP_TL/LRP_TP_sub_%d.npy', patient_num);
LRP_result_individual = readNPY(LRP_name);
LRP_mean_individual = squeeze(mean(LRP_result_individual, 1));
all_value_vector = reshape(LRP_mean_individual, 1, []);
all_value_vector_sort = sort(all_value_vector, 'descend');
thd = all_value_vector_sort(10800);  % 상위 10%
%thd = all_value_vector_sort(5400);  % 상위 5%
%thd = all_value_vector_sort(1080);  % 상위 1%

epoch = 100;
result_path = 'D:\ANT_3D_CNN_source_transfer2\LRP\LRP_TL\LRP_heatmap';
cfg = [];
%cfg.cmax = max(LRP_all_mean(:));
cfg.cmin = thd;
cfg.cmax = 0.0005;
cfg.summary = false;
cfg.plot = '3D'; % '2D', '3D', false
% set figure
[~, rFig] = func_plot_surface_LRP3D(cfg, LRP_mean_individual(:,:,1));
cfg.hFig = rFig;
% figure;

val_max = [];
sourcevalues = [];
for ti = 1:15
%     subplot(4,4,ti);
    disp(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
    cfg.save_path = [result_path filesep 'images' filesep num2str(ti) '_avg_test_' num2str(epoch*(ti-1)) '_' num2str(epoch*ti) '.png'];
    [sourcevalue, ~, stat] = func_plot_surface_LRP3D(cfg, LRP_mean_individual(:,:,ti));
    val_max = cat(1, val_max, stat.max);
    sourcevalues = cat(2, sourcevalues, sourcevalue);
%     title(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
end
save([result_path filesep 'images' filesep 'sourcevalues.mat'], 'sourcevalues');

% 한장씩 확인
for ti = 8:8
%     subplot(4,4,ti);
    disp(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
    cfg.save_path = [result_path filesep 'images' filesep num2str(ti) '_avg_test_' num2str(epoch*(ti-1)) '_' num2str(epoch*ti) '.png'];
    [sourcevalue, ~, stat] = func_plot_surface_LRP3D(cfg, LRP_mean_individual(:,:,ti));
    val_max = cat(1, val_max, stat.max);
    sourcevalues = cat(2, sourcevalues, sourcevalue);
%     title(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
end


% ----------------------------------------------------------------------------------------------------------------------------------------
% -------------------------------------------------------------- 전체 피험자 800-900 ms 앞, 뒤로 확인 -------------------------------------
% ----------------------------------------------------------------------------------------------------------------------------------------
clc;clear;
patient_num = 1;

LRP_name = sprintf('D:/ANT_3D_CNN_source_transfer2/LRP/LRP_TL/LRP_TP_sub_%d.npy', patient_num);
LRP_result_individual = readNPY(LRP_name);
LRP_mean_individual = squeeze(mean(LRP_result_individual, 1));
all_value_vector = reshape(LRP_mean_individual, 1, []);
all_value_vector_sort = sort(all_value_vector, 'descend');
thd = all_value_vector_sort(10800);  % 상위 10%
%thd = all_value_vector_sort(5400);  % 상위 5%
%thd = all_value_vector_sort(1080);  % 상위 1%

epoch = 100;
result_path = 'D:\ANT_3D_CNN_source_transfer2\LRP\LRP_TL\LRP_heatmap';
cfg = [];
%cfg.cmax = max(LRP_all_mean(:));
cfg.cmin = thd;
cfg.cmax = 0.0005;
cfg.summary = false;
cfg.plot = '3D'; % '2D', '3D', false
% set figure
[~, rFig] = func_plot_surface_LRP3D(cfg, LRP_mean_individual(:,:,1));
cfg.hFig = rFig;
% figure;

val_max = [];
sourcevalues = [];

% 한장씩 확인
for p = 1:62
    LRP_name = sprintf('D:/ANT_3D_CNN_source_transfer2/LRP/LRP_TL/LRP_TP_sub_%d.npy', p);
    LRP_result_individual = readNPY(LRP_name);
    LRP_mean_individual = squeeze(mean(LRP_result_individual, 1));
    all_value_vector = reshape(LRP_mean_individual, 1, []);
    all_value_vector_sort = sort(all_value_vector, 'descend');
    thd = all_value_vector_sort(10800);  % 상위 10%
    cfg.cmin = thd;

    for ti = 9:9
    %     subplot(4,4,ti);
        disp(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
        cfg.save_path = [result_path filesep 'images' filesep num2str(p) '_avg_test_' num2str(epoch*(ti-1)) '_' num2str(epoch*ti) '.png'];
        [sourcevalue, ~, stat] = func_plot_surface_LRP3D(cfg, LRP_mean_individual(:,:,ti));
        val_max = cat(1, val_max, stat.max);
        sourcevalues = cat(2, sourcevalues, sourcevalue);
    %     title(['time: ' num2str(epoch*(ti-1)) '_' num2str(epoch*ti)]);
    end
end





% ---------- scout template 조정 ---------- %
% load('C:\Users\Nelab_001\Documents\MATLAB\RBD_ANT\2.HJI_source_analysis\scout_Mindboggle_62.mat');
% for i=1:size(Scouts,2)
%    Scouts(i).Vertices=Scouts(i).Seed;
% end
% save('C:\Users\Nelab_001\Documents\MATLAB\RBD_ANT\2.HJI_source_analysis\scout_Mindboggle_62_seed_vertex.mat','Name','Scouts','TessNbVertices');

% lH_image: left hemisphere image
% rH_image: right hemisphere image
% surface_path: 복원하고자하는 surface template path
lH_image = a(:, 1:60);
rH_image = a(:, 61:120);
surface_path = 'C:\Users\Nelab_001\Documents\MATLAB\brainstorm_db\RBD_ANT_source_example\anat\@default_subject\tess_cortex_pial_low.mat';

[sourcevalues] = inflate_source(lH_image, rH_image, surface_path);
save('sourcevalues.mat', 'sourcevalues');
